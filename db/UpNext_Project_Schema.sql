-- Drop the old row-level trigger safely (ignore "does not exist")
BEGIN
  EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TASKS_STATUS_RECALC_BLOCK';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE <> -4080 THEN RAISE; END IF;  -- -4080 = trigger does not exist
END;
/

-- Recreate as a statement-level trigger (NO "FOR EACH ROW")
CREATE OR REPLACE TRIGGER TRG_TASKS_STATUS_RECALC_BLOCK
AFTER UPDATE OF STATUS ON TASKS
BEGIN
  UPDATE TASKS S
     SET IS_BLOCKED =
       CASE
         WHEN EXISTS (
           SELECT 1
             FROM TASK_DEPENDENCIES D
             JOIN TASKS P ON P.TASK_ID = D.PREDECESSOR_TASK_ID
            WHERE D.SUCCESSOR_TASK_ID = S.TASK_ID
              AND P.STATUS <> 'DONE'
         )
         THEN 'Y' ELSE 'N'
       END
   WHERE EXISTS (SELECT 1 FROM TASK_DEPENDENCIES D WHERE D.SUCCESSOR_TASK_ID = S.TASK_ID);
END;
/



ALTER TABLE ACTIVITY_LOGS DROP CONSTRAINT FK_LOG_PROJ;
ALTER TABLE ACTIVITY_LOGS
  ADD CONSTRAINT FK_LOG_PROJ
  FOREIGN KEY (PROJECT_ID) REFERENCES PROJECTS(PROJECT_ID)
  ON DELETE CASCADE;

ALTER TABLE ACTIVITY_LOGS DROP CONSTRAINT FK_LOG_TASK;
ALTER TABLE ACTIVITY_LOGS
  ADD CONSTRAINT FK_LOG_TASK
  FOREIGN KEY (TASK_ID) REFERENCES TASKS(TASK_ID)
  ON DELETE CASCADE;



